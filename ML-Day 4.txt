# -*- coding: utf-8 -*-
"""
Created on Sun Sep 27 14:37:13 2020

@author: Abhinash
"""
#MACHINE LEARNING BATCH

import numpy as np
import pandas as pd

#TITANIC:: DATASETS

data=pd.read_csv("data.csv")

data.head()
data.tail()

#top 25 row examine
data.head(25)

#how to extract data by row /col
#pandas method
1) .loc[row,col]
2) .iloc[row,col]

#variety of columns in data
data.info()

#i want to extarct data columns: name,gender,survived
df=data.iloc[0:10,[1,3,4]]
df

df=data.loc[0:5,["Embarked",
                 "Name"]]
df

#######################################
#data Extraction according to condition
#data titianic i want only data
#age :[15-50] and gender=female

df=data[(data["Sex"]=='female') & ((data["Age"]>=15) & (data["Age"]<=50))]
df

##########################################
#columns analyse missing percentage basis
per=(data.isnull().sum()/len(data))*100
per

#any column which has 60+% of missing value that can
#be treated as irrelevant

#irrelevant columns DEl/Dropout

data=data.drop(["Cabin"],axis=1)
data.info()

#data missing value
data.isnull().sum()


#lets find how many people board the ship from diff loc
#value counts of person

data["Embarked"].value_counts()

#max people have borad: southhampton
'''
S    644
C    168
Q     77
'''

#missing data in embarked: 
data["Embarked"].fillna("S",inplace=True)
data.isnull().sum()


#numeric fill
#distribution check
data["Age"].plot.hist()
#data is right skew : median/mean

data["Age"].fillna(data["Age"].median(),
    inplace=True)
#---------------------------------------------
data text  handle??
Gender: Male/Female:
    #model: handle numeric data

data["Sex"].head()

#text-->muneric
#1) LabelEncoder()
#2) MAP()
#3)Dummy variable

df=data.loc[0:5,["Sex","Survived"]]
df

#label encoder
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
#Encoder the gender
df["Sex"]=le.fit_transform(df["Sex"])
df

#map value: 1:Female, 2: MAle
df=data.loc[0:5,["Sex","Survived"]]
df

df["Sex"]=df["Sex"].map({"female":1,"male":2})
print(df)

#DUMMY VARIABLE??
df=data.loc[0:5,["Sex","Survived"]]
df

#dummy table
gender=pd.get_dummies(df["Sex"])
gender

#Rule of dummy variable: N-1
#N: refer to class_counts:

#above example: class_count: 2
#dummy:=2-1=1

gender.pop('male')
gender
#dummy variable ko apne data add krna hoga
#dummy table
gender=pd.get_dummies(df["Sex"],prefix="Gender",
                      prefix_sep="_",
                      drop_first=True)
gender


#now i have to concat my data with dummy
df1=pd.concat((df,gender),axis=1)
df1

df1.pop("Sex")
df1

#-------------------------------------
#perfer: Dummy one

#visualization: 2D(matplotlib)
import matplotlib.pyplot as plt

#graphs: line-plot/scatter-plot
#pie chart/bar-plot/histogram

#3-D visualization: seaborn
import seaborn as sns


import matplotlib.pyplot as plt
#chart--> LINE CHART

import pandas as pd

d={"year":[1950,1960,1970,1980,1990,2000,2010,2020],
   "China":[60,80,100,105,111,117,121,129],
   "India":[40,60,88,69,97,115,121,125]}
df=pd.DataFrame(d)
print(df)

#plot use matplotlib
plt.plot(df["year"],df["India"])
plt.xlabel("YEAR")
plt.ylabel("Popluation")
plt.title("POPULATION CURVE",color="red")
plt.show()

#two country compare single chart
plt.plot(df["year"],df["India"],
         label="India",color="Blue")
plt.plot(df["year"],df["China"],
         label="China",color="red")
plt.xlabel("YEAR")
plt.ylabel("Popluation")
plt.title("POPULATION CURVE",color="red")
plt.legend()
plt.show()

#-----------------------------------
#bar-chart
plt.bar(df["year"],df["India"],width=2,color="red")
plt.xlabel("YEAR")
plt.ylabel("Popluation")
plt.title("POPULATION CURVE",color="red")
plt.show()


#combine graph
plt.bar(df["year"],df["India"],
         label="India",color="Blue",width=3)
plt.bar(df["year"],df["China"],
         label="China",color="red")
plt.xlabel("YEAR")
plt.ylabel("Popluation")
plt.title("POPULATION CURVE",color="red")
plt.legend()
plt.show()

#############################################
#relation ship :scatter plot

d={"Salary":[10,20,30,40,50],
   "Age":[18,28,38,45,56]}
df=pd.DataFrame(d)

plt.scatter(df["Age"],df["Salary"])
plt.show()
##########################################3











    
    























